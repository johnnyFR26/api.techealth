generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id             Int             @id @default(autoincrement())
  name           String
  cpf            String          @unique
  birthDate      DateTime
  address        String
  phone          String?
  email          String?
  createdAt      DateTime        @default(now())
  appointments   Appointment[]
  medicalRecords MedicalRecord[]
  Invoice        Invoice[]
}

model Doctor {
  id           Int           @id @default(autoincrement())
  name         String
  crm          String        @unique
  specialty    String
  phone        String?
  email        String?
  hireDate     DateTime
  appointments Appointment[]
}

model Appointment {
  id        Int               @id @default(autoincrement())
  patientId Int
  doctorId  Int?
  date      DateTime
  status    AppointmentStatus @default(SCHEDULED)
  notes     String?

  patient  Patient   @relation(fields: [patientId], references: [id])
  doctor   Doctor?   @relation(fields: [doctorId], references: [id])
  invoices Invoice[]
}

model MedicalRecord {
  id          Int      @id @default(autoincrement())
  patientId   Int
  updatedAt   DateTime @default(now())
  description String

  patient Patient @relation(fields: [patientId], references: [id])
}

model Medicine {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  expiration  DateTime
  price       Float
  stockItems  Stock[]
}

model Stock {
  id         Int      @id @default(autoincrement())
  medicineId Int
  quantity   Int
  updatedAt  DateTime @default(now())

  medicine Medicine @relation(fields: [medicineId], references: [id])
}

model Employee {
  id       Int      @id @default(autoincrement())
  name     String
  cpf      String   @unique
  role     String
  phone    String?
  email    String?
  hireDate DateTime
  salary   Float
  shifts   Shift[]
}

model Shift {
  id         Int      @id @default(autoincrement())
  employeeId Int
  startTime  DateTime
  endTime    DateTime

  employee Employee @relation(fields: [employeeId], references: [id])
}

model Invoice {
  id            Int           @id @default(autoincrement())
  appointmentId Int?
  patientId     Int
  amount        Float
  status        InvoiceStatus @default(PENDING)
  issuedAt      DateTime      @default(now())
  paidAt        DateTime?

  appointment Appointment? @relation(fields: [appointmentId], references: [id])
  patient     Patient      @relation(fields: [patientId], references: [id])
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELED
}
